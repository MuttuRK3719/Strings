// IP address 1108
public String defangIPaddr(String address) {
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<address.length();i++){
            char ch=address.charAt(i);
            if(ch=='.'){
                sb.append("[.]");
            }
            else sb.append(ch);
        }
        return new String(sb);
    }
https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/
  public String freqAlphabets(String s) {
        StringBuilder sb=new StringBuilder();
    for(int i=s.length()-1;i>=0;i--){
        char ch=s.charAt(i);
        int n=0;
        if(ch=='#'){
            n+=s.charAt(--i)-'0';
            n=10*(s.charAt(--i)-'0')+n;
            sb.append((char)(n+96));
        }
        else{
            sb.append((char)(96+ch-'0'));
        }
    }
    return sb.reverse().toString();
    }

https://leetcode.com/problems/number-of-strings-that-appear-as-substrings-in-word/
  public int numOfStrings(String[] patterns, String word) {
        int count=0;
    for(int i=0;i<patterns.length;i++){
        
        if(word.indexOf(patterns[i])>=0) count++;
    }
    return count;
    }
https://leetcode.com/problems/robot-return-to-origin/
 public static  boolean judgeCircle1(String moves) {
        int count=0;
        int count2=0;
    for(char ch:moves.toCharArray()){
        if(ch=='L') count++;
        else if(ch=='R')count--;
        else if(ch=='U')count2++;
        else count2--;
    }
    return count==0&&count2==0;
    }
    public static  boolean judgeCircle(String moves) {
        int []count=new int[26];
        for(char ch:moves.toCharArray()){
            count[ch-'A']++;
        }
        return count['R'-'A']==count['L'-'A']&&count['U'-'A']==count['D'-'A'];
    }
 public static  String reverseWords(String s) {
        char []ch=s.toCharArray();
        for(int i=0;i<s.length()-1;i++){
            int f=i;
            while(i<ch.length&&ch[i]!=' '){
                i++;
            }
            swap(ch,f,i-1);
        }
        return new String(ch);
    }
    static void swap(char []ch,int i,int j){
        while(i<j){
        char temp=ch[i];
        ch[i++]=ch[j];
        ch[j--]=temp;
    }}
