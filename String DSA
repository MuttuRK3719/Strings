// IP address 1108
public String defangIPaddr(String address) {
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<address.length();i++){
            char ch=address.charAt(i);
            if(ch=='.'){
                sb.append("[.]");
            }
            else sb.append(ch);
        }
        return new String(sb);
    }
https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/
  public String freqAlphabets(String s) {
        StringBuilder sb=new StringBuilder();
    for(int i=s.length()-1;i>=0;i--){
        char ch=s.charAt(i);
        int n=0;
        if(ch=='#'){
            n+=s.charAt(--i)-'0';
            n=10*(s.charAt(--i)-'0')+n;
            sb.append((char)(n+96));
        }
        else{
            sb.append((char)(96+ch-'0'));
        }
    }
    return sb.reverse().toString();
    }

https://leetcode.com/problems/number-of-strings-that-appear-as-substrings-in-word/
  public int numOfStrings(String[] patterns, String word) {
        int count=0;
    for(int i=0;i<patterns.length;i++){
        
        if(word.indexOf(patterns[i])>=0) count++;
    }
    return count;
    }
https://leetcode.com/problems/robot-return-to-origin/
 public static  boolean judgeCircle1(String moves) {
        int count=0;
        int count2=0;
    for(char ch:moves.toCharArray()){
        if(ch=='L') count++;
        else if(ch=='R')count--;
        else if(ch=='U')count2++;
        else count2--;
    }
    return count==0&&count2==0;
    }
    public static  boolean judgeCircle(String moves) {
        int []count=new int[26];
        for(char ch:moves.toCharArray()){
            count[ch-'A']++;
        }
        return count['R'-'A']==count['L'-'A']&&count['U'-'A']==count['D'-'A'];
    }
 public static  String reverseWords(String s) {
        char []ch=s.toCharArray();
        for(int i=0;i<s.length()-1;i++){
            int f=i;
            while(i<ch.length&&ch[i]!=' '){
                i++;
            }
            swap(ch,f,i-1);
        }
        return new String(ch);
    }
    static void swap(char []ch,int i,int j){
        while(i<j){
        char temp=ch[i];
        ch[i++]=ch[j];
        ch[j--]=temp;
    }}
https://leetcode.com/problems/excel-sheet-column-title/
    public String convertToTitle(int columnNumber) {
        StringBuilder st=new StringBuilder();
        while(columnNumber>0){
            columnNumber--;
            st.append((char)(columnNumber%26+'A'));
            columnNumber/=26;
        }
        return st.reverse().toString();
    }


https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/
 public int strStr(String haystack, String needle) {
    char[]st1=haystack.toCharArray();
        char[]st2=needle.toCharArray();
        int startIndex=-1;
        for(int i=0;i<st1.length;i++){
            startIndex=i;
            int j=0;
            while(i<st1.length&&j<st2.length){
            if(st1[i]==st2[j]){
              i++;
              j++;
            } 
            else{
                i=startIndex;
                break;
            }
        }
        if(j==st2.length) return startIndex;
        }
        return -1;
    }

https://leetcode.com/problems/longest-common-prefix/
   public String longestCommonPrefix(String[] strs) {
     char []ch=strs[0].toCharArray();
     int k=ch.length;
     for(int i=1;i<strs.length;i++){
        k=match(ch,strs[i],k);
        if(k==0) return "";
     }
     return new String(ch,0,k);
    }
    int match(char []ch,String s,int k){
        int i=0;
        for( i=0;i<k&&i<s.length();i++){
            if(ch[i]!=s.charAt(i)) return i;
        }
        return Math.min(k,s.length());
    }

https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones/
public boolean checkOnesSegment(String s) {
        int count=0;
        if(s.length()==1) return s.charAt(0)=='1';
        boolean b=true;
    for(char ch:s.toCharArray()){
        if(count>0&&ch=='0')b=false;
        if(ch=='1'&&!b) return false;
        if(ch=='1')count++;
    }       
    return true;
    }


https://leetcode.com/problems/merge-strings-alternately/

public String mergeAlternately(String word1, String word2) {
        int i=0,j=0;
        char []margeChar=new char[word1.length()+word2.length()];
        int k=0;
        while(i<word1.length()&&j<word2.length()){
            margeChar[k++]=word1.charAt(i++);
            margeChar[k++]=word2.charAt(j++);
        }
        while(i<word1.length()){
            margeChar[k++]=word1.charAt(i++);
        }
        while(j<word2.length()){
            margeChar[k++]=word2.charAt(j++);
        }
        return new String(margeChar);
    }
